#!/bin/bash

# Description {{{
# ===============
#
# Configuration file for the Binary Space Partitioning Window Manager.
# This is part of my dotfiles, which are managed with GNU Stow.  See
# https://gitlab.com/protesilaos/dotfiles
#
# }}}

# Visual options {{{
# ==================

# window management
# -----------------
# also see `man bspc` or `man bspwm`
#bspc monitor -d 一 二 三 四 五 六 七 八 九 十
# 壱 弐 参 肆 伍 陸 漆
bspc monitor -d I II III IV V VI VII IIX IX X
#bspc monitor -d 壱 弐 参 肆 伍 陸 漆
bspc config border_width 3
bspc config window_gap 6
bspc config split_ratio 0.50
bspc config single_monocle true # smart borders
bspc config borderless_monocle true # smart borders
bspc config gapless_monocle false # use "true" for smart gaps
bspc config focus_follows_pointer false
bspc config pointer_follows_monitor true # brings pointer to focused monitor (see workspaces)
bspc config pointer_modifier mod1 # ALT key (see why right below)
bspc config pointer_action1 move # alt + left-click to move node
bspc config pointer_action2 resize_side # alt + right-click to resize node splits
bspc config click_to_focus any # focus with any click
bspc config swallow_first_click false # play the mouse event (e.g. right click context menu)
bspc config initial_polarity first_child
bspc config ignore_ewmh_focus true # prevent focus stealing

# Program-specific rules (use `xprop` to find each window's specifics).
# For special use cases, I apply "my_float_window" for programs that can
# accept a custom name/class.  These two definitions apply a custom
# class and name respectively.
bspc rule -a my_float_window:* state=floating
bspc rule -a *:my_float_window state=floating

# External window rules.
bspc config external_rules_command "$(which own_script_bspwm_external_rules_command)"

# colours
# -------
# NOTE these are the fallback values, but not what is actually loaded
# post-launch (see autostart for own_script_bspwm_config_post_launch)

# EXPLAIN: bspwm does not read the custom colours if they are sourced
# from another file at launch.  Instead it defaults to its own colour
# values.  Here I set the defaults I would prefer to have, while I
# autostart the script that sources and then applies the colours I
# actually want.
bspc config normal_border_color "#1a1a1a" # unfocused window
bspc config active_border_color "#555555" # focused window, unfocused monitor
bspc config focused_border_color "#448822" # focused window, focused monitor
bspc config presel_feedback_color "#ccaa00" # feedback for manual node split

# }}}

# autostart {{{
# =============

# The hotkey daemon that handles all custom key bindings, including the
# ones that control BSPWM
sxhkd -s /tmp/sxhfifo &

if [ "$(which polybar 2> /dev/null)" ]; then
    # Make sure we have no running instances
    if pgrep -x polybar; then
        pkill -x polybar
    fi

    termtabs -i 4&
    polybar mainbar &
fi

# display compositor for shadow effects and background blur behind
# transparent elements
if [ "$(which compton 2> /dev/null)" ]; then
    compton --config "$HOME/.config/compton.conf" &
fi

# Rut the tool that sets the wallpaper.  A program could be used that
# handles the desktop in general, including the option to set icons.
# But this is enough for my case.  Here is a command I tested and which
# works (using the Xfce desktop manager):
# xfdesktop --sm-client-disable --disable-wm-check &
if [ "$(which feh 2> /dev/null)" ]; then
    if [ -f "$HOME/.fehbg" ]; then
        "$HOME/.fehbg" &
    elif [ -f "$HOME/.wallpaper.jpg" ]; then
        feh --bg-fill "$HOME/.wallpaper.jpg" &
    else
        feh --bg-fill "$HOME/.wallpapers/default.png" &
    fi
fi

# TODO review this, as there may be an even simpler way
# specify keyboard layout and compose key
if [ "$(which setxkbmap 2> /dev/null)" ]; then
    # TODO review this - chiggins
    #setxkbmap -option compose:menu

    # NOTE we can set the toggle here, but I do this via sxhkd, which
    # allows me to run a script that does the actual layout switching.
    # This in turn lets me output a unique identifier to a temporary
    # file, which can then be read to determine the current keyboard
    # layout.  That can be printed to the melonpanel.

    # setxkbmap -layout 'us,gr' -option 'grp:alt_caps_toggle'
    setxkbmap -layout 'us'

    # For the key chord that performs the layout switching see my
    # `sxhkdrc`.  The script: `own_script_current_keyboard_layout`
fi
